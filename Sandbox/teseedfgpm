class ForwardCalculation:

    def __init__(self, measHis, measurementToUse, currentTime):
        self.measurementForward = measurementToUse
        self.prediction(measHist, currentTime, 2)

    def prediction(self, measHist, currentTime, numPrev):
        if numPrev > len(measHist):
            numPrev = len(measHist)

        measSize = len(self.measurementForward)
        speed = [0] * measSize
        #count2 = [0] * measSize # or int([0])*measSize. If initialised as the first one it will have the length of measSize as its first element
        #measID = [0] * measSize
        prevDistCount = [0] * measSize
        findPrevDist = False
        prevDist = [[[ 0 for col in range(measSize)] for row in range(numPrev+1)] for layers in range(2)]
        #ArrayList<Measurement.measurement> measurementForward = measurementsToUse; #still need to rewrite this
        #Measurement.measurement tempMeas = None
        
        for n in range(0,measSize):
            count2 = 0
            #count2+[0] this requires the the list to be initialised as count2 = int([0])*len(measSize)
            #count2.append(0) not sure which one will work. I think its clear I'm slightly confused about this :DDD
            #count2Copy = count2.append(0)
            #count2Copy = 0
            #count2 = 0 otherwise this might be enough
            measID = self.measurementForward[n].transmitterID # its late and I'm confused
            count = len(measHist)-1
            while findPrevDist == False:
                if measID == measHist[count].transmitterID && count2 < numPrev + 1 && measHist[count].ultrasoundLevel > 5:
                    prevDist[n][count2][0] = measHist[count].distance
                    prevDist[n][count2][1] = measHist[count].timestampMS


        def zero():
          
            pass


        def one():
          
            pass


        def two():
          
            pass


        def three():
          
            print('hello')
          




        ry = {0 : zero,

        1 : one,

        2 : two,

        3 : three}


        for m in range(0,4):

          count = m

          #print(count)

          ry[count]()